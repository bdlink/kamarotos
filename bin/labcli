#!/bin/bash
. ${OKD_LAB_PATH}/bin/labEnv.sh
. ${OKD_LAB_PATH}/bin/labUtils.sh
. ${OKD_LAB_PATH}/bin/piUtils.sh
. ${OKD_LAB_PATH}/bin/routerUtils.sh
. ${OKD_LAB_PATH}/bin/clusterUtils.sh
. ${OKD_LAB_PATH}/bin/hostUtils.sh

SSH="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
SCP="scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

for i in "$@"
do
  case $i in
    -d=*|--domain=*)
      SUB_DOMAIN="${i#*=}"
    ;;
    *)
       # catch all
    ;;
  esac
done

if [[ -z ${SUB_DOMAIN} ]]
then
  labctx
else
  labctx ${SUB_DOMAIN}
fi

if [[ ${LAB_CTX_ERROR} == "true" ]]
then
  exit 1
fi

DOMAIN="${SUB_DOMAIN}.${LAB_DOMAIN}"
INSTALL_URL="http://${BASTION_HOST}/install"

function deploy() {
  for i in "$@"
  do
    case $i in
      -c|--cluster)
        deployCluster
      ;;
      -w|--worker)
        deployWorkers
      ;;
      -k|--kvm-hosts)
        deployKvmHosts
      ;;
      *)
        # catch all
      ;;
    esac
  done
}

function destroy() {
  P_CMD="poweroff"

  for i in "$@"
  do
    case $i in
      -b|--bootstrap)
        DELETE_BOOTSTRAP=true
      ;;
      -w=*|--worker=*)
        DELETE_WORKER=true
        W_HOST_NAME="${i#*=}"
      ;;
      -c|--cluster)
        DELETE_CLUSTER=true
        DELETE_WORKER=true
        W_HOST_NAME="all"
      ;;
      -k=*|--kvm-host=*)
        DELETE_KVM_HOST=true
        K_HOST_NAME="${i#*=}"
      ;;
      -m=*|--master=*)
        M_HOST_NAME="${i#*=}"
      ;;
      -r)
        P_CMD="reboot"
      ;;
      *)
        # catch all
      ;;
    esac
  done

  WORK_DIR=${OKD_LAB_PATH}/${CLUSTER_NAME}-${SUB_DOMAIN}-${LAB_DOMAIN}

  if [[ ${DELETE_WORKER} == "true" ]]
  then
    if [[ ${W_HOST_NAME} == "" ]]
    then
      echo "-w | --worker must have a value"
      exit 1
    fi
    if [[ ${W_HOST_NAME} == "all" ]] # Delete all Nodes
    then
      let j=$(yq e ".compute-nodes" ${CLUSTER_CONFIG} | yq e 'length' -)
      let i=0
      while [[ i -lt ${j} ]]
      do
        deleteWorker ${i} ${P_CMD}
        i=$(( ${i} + 1 ))
      done
    else
      let i=0
      DONE=false
      let NODE_COUNT=$(yq e ".compute-nodes" ${CLUSTER_CONFIG} | yq e 'length' -)
      while [[ i -lt ${NODE_COUNT} ]]
      do
        host_name=$(yq e ".compute-nodes.[${i}].name" ${CLUSTER_CONFIG})
        if [[ ${host_name} == ${W_HOST_NAME} ]]
        then
          W_HOST_INDEX=${i}
          DONE=true
          break;
        fi
        i=$(( ${i} + 1 ))
      done
      if [[ ${W_HOST_INDEX} == "" ]]
      then
        echo "Host: ${W_HOST_NAME} not found in config file."
        exit 1
      fi
      deleteWorker ${W_HOST_INDEX} ${P_CMD}
    fi
  fi

  if [[ ${DELETE_KVM_HOST} == "true" ]]
  then
    if [[ ${K_HOST_NAME} == "" ]]
    then
      echo "-k"
      exit 1
    fi
    if [[ ${K_HOST_NAME} == "all" ]] # Delete all Nodes
    then
      let j=$(yq e ".kvm-hosts" ${CLUSTER_CONFIG} | yq e 'length' -)
      let i=0
      while [[ i -lt ${j} ]]
      do
        deleteKvmHost ${i} ${P_CMD}
        i=$(( ${i} + 1 ))
      done
    else
      let i=0
      DONE=false
      let NODE_COUNT=$(yq e ".kvm-hosts" ${CLUSTER_CONFIG} | yq e 'length' -)
      while [[ i -lt ${NODE_COUNT} ]]
      do
        host_name=$(yq e ".kvm-hosts.[${i}].host-name" ${CLUSTER_CONFIG})
        if [[ ${host_name} == ${K_HOST_NAME} ]]
        then
          K_HOST_INDEX=${i}
          DONE=true
          break;
        fi
        i=$(( ${i} + 1 ))
      done
      if [[ ${K_HOST_INDEX} == "" ]]
      then
        echo "Host: ${K_HOST_NAME} not found in config file."
        exit 1
      fi
      deleteKvmHost ${K_HOST_INDEX} ${P_CMD}
    fi
  fi

  if [[ ${DELETE_BOOTSTRAP} == "true" ]]
  then
    if [[ $(yq e ".bootstrap.metal" ${CLUSTER_CONFIG}) == "true" ]]
    then
      kill $(ps -ef | grep qemu | grep bootstrap | awk '{print $2}')
      rm -rf ${WORK_DIR}/bootstrap
    else
      host_name="${CLUSTER_NAME}-bootstrap"
      kvm_host=$(yq e ".bootstrap.kvm-host" ${CLUSTER_CONFIG})
      deleteNodeVm ${host_name} ${kvm_host}
    fi
    deletePxeConfig $(yq e ".bootstrap.mac-addr" ${CLUSTER_CONFIG})
    deleteDns ${CLUSTER_NAME}-${DOMAIN}-bs
    if [[ ${SNO} == "false" ]]
    then
      ${SSH} root@${DOMAIN_ROUTER} "cat /etc/haproxy-${CLUSTER_NAME}.cfg | grep -v bootstrap > /etc/haproxy-${CLUSTER_NAME}.no-bootstrap && \
      mv /etc/haproxy-${CLUSTER_NAME}.no-bootstrap /etc/haproxy-${CLUSTER_NAME}.cfg && \
      /etc/init.d/haproxy-${CLUSTER_NAME} stop ; \
      /etc/init.d/haproxy-${CLUSTER_NAME} start"
    fi
  fi

  if [[ ${DELETE_WORKER} == "true" ]]
  then
    if [[ ${W_HOST_NAME} == "all" ]] # Delete all Nodes
    then
      let j=$(yq e ".compute-nodes" ${CLUSTER_CONFIG} | yq e 'length' -)
      let i=0
      while [[ i -lt ${j} ]]
      do
        deleteWorker ${i} ${P_CMD}
        i=$(( ${i} + 1 ))
      done
    else
      deleteWorker ${W_HOST_INDEX} ${P_CMD}
    fi
  fi

  if [[ ${DELETE_CLUSTER} == "true" ]]
  then
    deleteControlPlane ${P_CMD}
  fi

  ${SSH} root@${DOMAIN_ROUTER} "/etc/init.d/named stop && sleep 2 && /etc/init.d/named start && sleep 2"
  ${SSH} root@${EDGE_ROUTER} "/etc/init.d/named stop && sleep 2 && /etc/init.d/named start"
}

function start() {
  for i in "$@"
  do
    case $i in
      -b|--bootstrap)
        startBootstrap
      ;;
      -m|--master)
        startControlPlane
      ;;
      -w|--worker)
        startWorker
      ;;
      -u|--uncordon)
        unCordonNode
      ;;
      *)
        # catch all
      ;;
    esac
  done
}

function stop() {
  for i in "$@"
  do
    case $i in
      -c|--cluster)
        stopCluster
      ;;
      -w|--worker)
        stopWorkers
      ;;
      -k|--kvm)
        stopKvmHosts
      ;;
      *)
        # catch all
      ;;
    esac
  done
}

function updateCentos() {

  wget http://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/isolinux/vmlinuz -O ${OKD_LAB_PATH}/boot-files/vmlinuz
  wget http://mirror.stream.centos.org/9-stream/BaseOS/x86_64/os/isolinux/initrd.img -O ${OKD_LAB_PATH}/boot-files/initrd.img
  DOMAIN_COUNT=$(yq e ".sub-domain-configs" ${LAB_CONFIG_FILE} | yq e 'length' -)
  let array_index=0
  while [[ array_index -lt ${DOMAIN_COUNT} ]]
  do
    router_ip=$(yq e ".sub-domain-configs.[${array_index}].router-ip" ${LAB_CONFIG_FILE})
    ${SCP} ${OKD_LAB_PATH}/boot-files/vmlinuz root@${router_ip}:/data/tftpboot/networkboot/vmlinuz
    ${SCP} ${OKD_LAB_PATH}/boot-files/initrd.img root@${router_ip}:/data/tftpboot/networkboot/initrd.img
    array_index=$(( ${array_index} + 1 ))
  done
  ${SSH} root@${BASTION_HOST} "nohup /root/bin/MirrorSync.sh &"
}

function mirrorCeph() {

  echo "Enter the credentials for the openshift mirrir service account in Nexus:"
  podman login ${LOCAL_REGISTRY}

  echo "Pulling Rook/Ceph Images..."
  podman pull  quay.io/cephcsi/cephcsi:${CEPH_CSI_VER}
  podman pull  k8s.gcr.io/sig-storage/csi-node-driver-registrar:${CSI_NODE_DRIVER_REG_VER}
  podman pull  k8s.gcr.io/sig-storage/csi-resizer:${CSI_RESIZER_VER}
  podman pull  k8s.gcr.io/sig-storage/csi-provisioner:${CSI_PROVISIONER_VER}
  podman pull  k8s.gcr.io/sig-storage/csi-snapshotter:${CSI_SNAPSHOTTER_VER}
  podman pull  k8s.gcr.io/sig-storage/csi-attacher:${CSI_ATTACHER_VER}
  podman pull  docker.io/rook/ceph:${ROOK_CEPH_VER}
  podman pull  quay.io/ceph/ceph:${CEPH_VER}

  echo "Tagging Rook/Ceph Images..."
  podman tag quay.io/cephcsi/cephcsi:${CEPH_CSI_VER} ${LOCAL_REGISTRY}/cephcsi/cephcsi:${CEPH_CSI_VER}
  podman tag k8s.gcr.io/sig-storage/csi-node-driver-registrar:${CSI_NODE_DRIVER_REG_VER} ${LOCAL_REGISTRY}/sig-storage/csi-node-driver-registrar:${CSI_NODE_DRIVER_REG_VER}
  podman tag k8s.gcr.io/sig-storage/csi-resizer:${CSI_RESIZER_VER} ${LOCAL_REGISTRY}/sig-storage/csi-resizer:${CSI_RESIZER_VER}
  podman tag k8s.gcr.io/sig-storage/csi-provisioner:${CSI_PROVISIONER_VER} ${LOCAL_REGISTRY}/sig-storage/csi-provisioner:${CSI_PROVISIONER_VER}
  podman tag k8s.gcr.io/sig-storage/csi-snapshotter:${CSI_SNAPSHOTTER_VER} ${LOCAL_REGISTRY}/sig-storage/csi-snapshotter:${CSI_SNAPSHOTTER_VER}
  podman tag k8s.gcr.io/sig-storage/csi-attacher:${CSI_ATTACHER_VER} ${LOCAL_REGISTRY}/sig-storage/csi-attacher:${CSI_ATTACHER_VER}
  podman tag docker.io/rook/ceph:${ROOK_CEPH_VER} ${LOCAL_REGISTRY}/rook/ceph:${ROOK_CEPH_VER}
  podman tag quay.io/ceph/ceph:${CEPH_VER} ${LOCAL_REGISTRY}/ceph/ceph:${CEPH_VER}

  echo "Pushing Rook/Ceph Images..."
  podman push ${LOCAL_REGISTRY}/cephcsi/cephcsi:${CEPH_CSI_VER} --tls-verify=false
  podman push ${LOCAL_REGISTRY}/sig-storage/csi-node-driver-registrar:${CSI_NODE_DRIVER_REG_VER} --tls-verify=false
  podman push ${LOCAL_REGISTRY}/sig-storage/csi-resizer:${CSI_RESIZER_VER} --tls-verify=false
  podman push ${LOCAL_REGISTRY}/sig-storage/csi-provisioner:${CSI_PROVISIONER_VER} --tls-verify=false
  podman push ${LOCAL_REGISTRY}/sig-storage/csi-snapshotter:${CSI_SNAPSHOTTER_VER} --tls-verify=false
  podman push ${LOCAL_REGISTRY}/sig-storage/csi-attacher:${CSI_ATTACHER_VER} --tls-verify=false
  podman push ${LOCAL_REGISTRY}/rook/ceph:${ROOK_CEPH_VER} --tls-verify=false
  podman push ${LOCAL_REGISTRY}/ceph/ceph:${CEPH_VER} --tls-verify=false

  echo "Cleaning up local Rook/Ceph Images..."
  podman image rm -a
}

function installCeph() {

  setKubeConfig

  oc apply -f ${CEPH_WORK_DIR}/install/crds.yaml
  oc apply -f ${CEPH_WORK_DIR}/install/common.yaml
  oc apply -f ${CEPH_WORK_DIR}/install/rbac.yaml

  envsubst < ${CEPH_WORK_DIR}/install/operator-openshift.yaml | oc apply -f -

  let NODE_COUNT=$(yq e ".rook-ceph-nodes" ${CLUSTER_CONFIG} | yq e 'length' -)
  let node_index=0
  while [[ node_index -lt ${NODE_COUNT} ]]
  do
    node_name=$(yq e ".rook-ceph-nodes.[${node_index}].host" ${CLUSTER_CONFIG}).${DOMAIN}
    disk=$(yq e ".rook-ceph-nodes.[${node_index}].disk" ${CLUSTER_CONFIG})
    yq e ".spec.storage.nodes.[${node_index}].name = \"${node_name}\"" -i ${CEPH_WORK_DIR}/install/cluster.yaml
    yq e ".spec.storage.nodes.[${node_index}].devices.[0].name = \"${disk}\"" -i ${CEPH_WORK_DIR}/install/cluster.yaml
    yq e ".spec.storage.nodes.[${node_index}].devices.[0].config.osdsPerDevice = \"1\"" -i ${CEPH_WORK_DIR}/install/cluster.yaml
    node_index=$(( ${node_index} + 1 ))
    oc label nodes ${node_name} role=storage-node
  done
  let pause=20
  while [ ${pause} -gt 0 ]; do
    echo -ne "Giving The Operator Time To Start: ${pause}\033[0K\r"
    sleep 1
    : $((pause--))
  done
  envsubst < ${CEPH_WORK_DIR}/install/cluster.yaml | oc apply -f -
}

function initCephVars() {
  export CEPH_WORK_DIR=${OKD_LAB_PATH}/ceph-work-dir
  git clone https://github.com/cgruver/lab-ceph.git ${CEPH_WORK_DIR}

  export CEPH_CSI_VER=$(yq e ".cephcsi" ${CEPH_WORK_DIR}/install/versions.yaml)
  export CSI_NODE_DRIVER_REG_VER=$(yq e ".csi-node-driver-registrar" ${CEPH_WORK_DIR}/install/versions.yaml)
  export CSI_RESIZER_VER=$(yq e ".csi-resizer" ${CEPH_WORK_DIR}/install/versions.yaml)
  export CSI_PROVISIONER_VER=$(yq e ".csi-provisioner" ${CEPH_WORK_DIR}/install/versions.yaml)
  export CSI_SNAPSHOTTER_VER=$(yq e ".csi-snapshotter" ${CEPH_WORK_DIR}/install/versions.yaml)
  export CSI_ATTACHER_VER=$(yq e ".csi-attacher" ${CEPH_WORK_DIR}/install/versions.yaml)
  export ROOK_CEPH_VER=$(yq e ".rook-ceph" ${CEPH_WORK_DIR}/install/versions.yaml)
  export CEPH_VER=$(yq e ".ceph" ${CEPH_WORK_DIR}/install/versions.yaml)

  for j in "$@"
  do
    case $j in
      -m)
        mirrorCeph
      ;;
      -i)     
        installCeph
      ;;
      *)
        # catch all
      ;;
    esac
  done
}

for i in "$@"
do
  case $i in
    --pi)
      configPi "$@"
    ;;
    --router)
      configRouter "$@"
    ;;
    --disconnect)
      noInternet
    ;;
    --connect)
      restoreInternet
    ;;
    --deploy)
      deploy "$@"
    ;;
    --destroy)
      destroy "$@"
    ;;
    --start)
      start "$@"
    ;;
    --stop)
      stop "$@"
    ;;
    --user)
      addUser "$@"
    ;;
    --trust)
      trustClusterCert
    ;;
    --config-infra)
        configInfraNodes
    ;;
    --csr)
      approveCsr
    ;;
    --pull-secret)
      pullSecret
    ;;
    --git-secret)
      gitSecret "$@"
    ;;
    --latest)
      getOkdRelease
    ;;
    --console)
      ocConsole
    ;;
    --login)
      ocLogin
    ;;
    --cli)
      getOkdCmds
    ;;
    --dns)
      resetDns
    ;;
    --mirror)
      mirrorOkdRelease
    ;;
    --kube)
      setKubeConfig
      echo ${KUBECONFIG}
    ;;
    --update)
      updateCentos
    ;;
    --ceph)
      initCephVars "$@"
    ;;
    *)
       # catch all
    ;;
  esac
done
