#!/bin/bash
. ${OKD_LAB_PATH}/bin/labEnv.sh
. ${OKD_LAB_PATH}/bin/labUtils.sh
. ${OKD_LAB_PATH}/bin/piUtils.sh
. ${OKD_LAB_PATH}/bin/routerUtils.sh
. ${OKD_LAB_PATH}/bin/clusterUtils.sh
. ${OKD_LAB_PATH}/bin/hostUtils.sh

SSH="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
SCP="scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"

for i in "$@"
do
  case $i in
    -d=*|--domain=*)
      SUB_DOMAIN="${i#*=}"
    ;;
    *)
       # catch all
    ;;
  esac
done

if [[ -z ${SUB_DOMAIN} ]]
then
  labctx
else
  labctx ${SUB_DOMAIN}
fi

if [[ ${LAB_CTX_ERROR} == "true" ]]
then
  exit 1
fi

DOMAIN="${SUB_DOMAIN}.${LAB_DOMAIN}"
INSTALL_URL="http://${BASTION_HOST}/install"

function deploy() {
  for i in "$@"
  do
    case $i in
      -c|--cluster)
        deployCluster
      ;;
      -w|--worker)
        deployWorkers
      ;;
      -k|--kvm-hosts)
        deployKvmHosts
      ;;
      *)
        # catch all
      ;;
    esac
  done
}

function destroy() {
  for i in "$@"
  do
    case $i in
      -b|--bootstrap)
        DELETE_BOOTSTRAP=true
      ;;
      -w=*|--worker=*)
        DELETE_WORKER=true
        W_HOST_NAME="${i#*=}"
      ;;
      -c|--cluster)
        DELETE_CLUSTER=true
        DELETE_WORKER=true
        W_HOST_NAME="all"
      ;;
      -k=*|--kvm-host=*)
        DELETE_KVM_HOST=true
        K_HOST_NAME="${i#*=}"
      ;;
      -m=*|--master=*)
        M_HOST_NAME="${i#*=}"
      ;;
      *)
        # catch all
      ;;
    esac
  done

  WORK_DIR=${OKD_LAB_PATH}/${CLUSTER_NAME}-${SUB_DOMAIN}-${LAB_DOMAIN}

  if [[ ${DELETE_WORKER} == "true" ]]
  then
    if [[ ${W_HOST_NAME} == "" ]]
    then
      echo "-w | --worker must have a value"
      exit 1
    fi
    if [[ ${W_HOST_NAME} == "all" ]] # Delete all Nodes
    then
      let j=$(yq e ".compute-nodes" ${CLUSTER_CONFIG} | yq e 'length' -)
      let i=0
      while [[ i -lt ${j} ]]
      do
        deleteWorker ${i}
        i=$(( ${i} + 1 ))
      done
    else
      let i=0
      DONE=false
      let NODE_COUNT=$(yq e ".compute-nodes" ${CLUSTER_CONFIG} | yq e 'length' -)
      while [[ i -lt ${NODE_COUNT} ]]
      do
        host_name=$(yq e ".compute-nodes.[${i}].name" ${CLUSTER_CONFIG})
        if [[ ${host_name} == ${W_HOST_NAME} ]]
        then
          W_HOST_INDEX=${i}
          DONE=true
          break;
        fi
        i=$(( ${i} + 1 ))
      done
      if [[ ${W_HOST_INDEX} == "" ]]
      then
        echo "Host: ${W_HOST_NAME} not found in config file."
        exit 1
      fi
      deleteWorker ${W_HOST_INDEX}
    fi
  fi

  if [[ ${DELETE_KVM_HOST} == "true" ]]
  then
    if [[ ${K_HOST_NAME} == "" ]]
    then
      echo "-w | --worker must have a value"
      exit 1
    fi
    if [[ ${K_HOST_NAME} == "all" ]] # Delete all Nodes
    then
      let j=$(yq e ".kvm-hosts" ${CLUSTER_CONFIG} | yq e 'length' -)
      let i=0
      while [[ i -lt ${j} ]]
      do
        deleteKvmHost ${i}
        i=$(( ${i} + 1 ))
      done
    else
      let i=0
      DONE=false
      let NODE_COUNT=$(yq e ".kvm-hosts" ${CLUSTER_CONFIG} | yq e 'length' -)
      while [[ i -lt ${NODE_COUNT} ]]
      do
        host_name=$(yq e ".kvm-hosts.[${i}].host-name" ${CLUSTER_CONFIG})
        if [[ ${host_name} == ${K_HOST_NAME} ]]
        then
          K_HOST_INDEX=${i}
          DONE=true
          break;
        fi
        i=$(( ${i} + 1 ))
      done
      if [[ ${K_HOST_INDEX} == "" ]]
      then
        echo "Host: ${K_HOST_NAME} not found in config file."
        exit 1
      fi
      deleteKvmHost ${K_HOST_INDEX}
    fi
  fi

  if [[ ${DELETE_BOOTSTRAP} == "true" ]]
  then
    if [[ $(yq e ".bootstrap.metal" ${CLUSTER_CONFIG}) == "true" ]]
    then
      kill $(ps -ef | grep qemu | grep bootstrap | awk '{print $2}')
      rm -rf ${WORK_DIR}/bootstrap
    else
      host_name="${CLUSTER_NAME}-bootstrap"
      kvm_host=$(yq e ".bootstrap.kvm-host" ${CLUSTER_CONFIG})
      deleteNodeVm ${host_name} ${kvm_host}
    fi
    deletePxeConfig $(yq e ".bootstrap.mac-addr" ${CLUSTER_CONFIG})
    deleteDns ${CLUSTER_NAME}-${DOMAIN}-bs
    if [[ ${SNO} == "false" ]]
    then
      ${SSH} root@${DOMAIN_ROUTER} "cat /etc/haproxy-${CLUSTER_NAME}.cfg | grep -v bootstrap > /etc/haproxy-${CLUSTER_NAME}.no-bootstrap && \
      mv /etc/haproxy-${CLUSTER_NAME}.no-bootstrap /etc/haproxy-${CLUSTER_NAME}.cfg && \
      /etc/init.d/haproxy-${CLUSTER_NAME} stop ; \
      /etc/init.d/haproxy-${CLUSTER_NAME} start"
    fi
  fi

  if [[ ${DELETE_WORKER} == "true" ]]
  then
    if [[ ${W_HOST_NAME} == "all" ]] # Delete all Nodes
    then
      let j=$(yq e ".compute-nodes" ${CLUSTER_CONFIG} | yq e 'length' -)
      let i=0
      while [[ i -lt ${j} ]]
      do
        deleteWorker ${i}
        i=$(( ${i} + 1 ))
      done
    else
      deleteWorker ${W_HOST_INDEX}
    fi
  fi

  if [[ ${DELETE_CLUSTER} == "true" ]]
  then
    deleteControlPlane
  fi

  ${SSH} root@${DOMAIN_ROUTER} "/etc/init.d/named stop && sleep 2 && /etc/init.d/named start && sleep 2"
  ${SSH} root@${EDGE_ROUTER} "/etc/init.d/named stop && sleep 2 && /etc/init.d/named start"
}

function start() {
  for i in "$@"
  do
    case $i in
      -b|--bootstrap)
        startBootstrap
      ;;
      -m|--master)
        startControlPlane
      ;;
      -w|--worker)
        startWorker
      ;;
      -u|--uncordon)
        unCordonNode
      ;;
      *)
        # catch all
      ;;
    esac
  done
}

function stop() {
  for i in "$@"
  do
    case $i in
      -c|--cluster)
        stopCluster
      ;;
      -w|--worker)
        stopWorkers
      ;;
      -k|--kvm)
        stopKvmHosts
      ;;
      *)
        # catch all
      ;;
    esac
  done
}

for i in "$@"
do
  case $i in
    --pi)
      configPi "$@"
    ;;
    --router)
      configRouter "$@"
    ;;
    --disconnect)
      noInternet
    ;;
    --connect)
      restoreInternet
    ;;
    --deploy)
      deploy "$@"
    ;;
    --destroy)
      destroy "$@"
    ;;
    --start)
      start "$@"
    ;;
    --stop)
      stop "$@"
    ;;
    --user)
      addUser "$@"
    ;;
    --trust)
      trustClusterCert
    ;;
    --config-infra)
        configInfraNodes
    ;;
    --csr)
      approveCsr
    ;;
    --pull-secret)
      pullSecret
    ;;
    --git-secret)
      gitSecret $@
    ;;
    --latest)
      getOkdRelease
    ;;
    --console)
      ocConsole
    ;;
    --login)
      ocLogin
    ;;
    --cli)
      getOkdCmds
    ;;
    --dns)
      resetDns
    ;;
    --mirror)
      mirrorOkdRelease
    ;;
    --kube)
      setKubeConfig
      echo ${KUBECONFIG}
    ;;
    *)
       # catch all
    ;;
  esac
done
