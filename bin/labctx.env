function labctx() {

  SUB_DOMAIN=""
  INDEX=""
  config_file=""
  NEW_RELEASE="false"

  for i in "$@"
  do
    case $i in
      -c=*|--config=*)
        config_file="${i#*=}"
        shift
      ;;
      -d=*|--domain=*)
        sub_domain="${i#*=}"
        shift
      ;;
      -r=*|--release=*)
        OKD_VERSION="${i#*=}"
        NEW_RELEASE="true"
      ;;
      *)
            # Put usage here:
      ;;
    esac
  done

  if [[ ${config_file} == "" ]]
  then
    CONFIG_FILE=${LAB_CONFIG_FILE}
  else
    CONFIG_FILE=${config_file}
  fi

  DONE=false
  DOMAIN_COUNT=$(yq e ".sub-domain-configs" ${CONFIG_FILE} | yq e 'length' -)
  if [[ -z ${sub_domain} ]]
  then
    let array_index=0
    while [[ array_index -lt ${DOMAIN_COUNT} ]]
    do
      domain_name=$(yq e ".sub-domain-configs.[${array_index}].name" ${CONFIG_FILE})
      echo "$(( ${array_index} + 1 )) - ${domain_name}"
      array_index=$(( ${array_index} + 1 ))
    done
    echo "Enter the index of the domain that you want to work with:"
    read ENTRY
    INDEX=$(( ${ENTRY} - 1 ))
  else
    let i=0
    while [[ i -lt ${DOMAIN_COUNT} ]]
    do
      domain_name=$(yq e ".sub-domain-configs.[${i}].name" ${CONFIG_FILE})
      if [[ ${domain_name} == ${sub_domain} ]]
      then
        INDEX=${i}
        DONE=true
        break
      fi
      i=$(( ${i} + 1 ))
    done
    if [[ ${DONE} == "false" ]]
    then
      echo "Domain Entry Not Found In Config File."
    fi
  fi

  CLUSTER_CONFIG=$(yq e ".sub-domain-configs.[${INDEX}].cluster-config-file" ${CONFIG_FILE})

  export LAB_DOMAIN=$(yq e ".domain" ${LAB_CONFIG_FILE})
  export EDGE_ROUTER=$(yq e ".router" ${LAB_CONFIG_FILE})
  export CLUSTER_CONFIG=$(yq e ".sub-domain-configs.[${INDEX}].cluster-config-file" ${CONFIG_FILE})
  export SUB_DOMAIN=$(yq e ".sub-domain-configs.[${INDEX}].name" ${CONFIG_FILE})
  export DOMAIN_ROUTER=$(yq e ".sub-domain-configs.[${INDEX}].router-ip" ${CONFIG_FILE})
  export DOMAIN_ROUTER_EDGE=$(yq e ".sub-domain-configs.[${INDEX}].router-edge-ip" ${CONFIG_FILE})
  export DOMAIN_NETWORK=$(yq e ".sub-domain-configs.[${INDEX}].network" ${CONFIG_FILE})
  export DOMAIN_NETMASK=$(yq e ".sub-domain-configs.[${INDEX}].netmask" ${CONFIG_FILE})
  export LOCAL_REGISTRY=$(yq e ".cluster.local-registry" ${CLUSTER_CONFIG})
  CLUSTER_NAME=$(yq e ".cluster.name" ${CLUSTER_CONFIG})
  export KUBE_INIT_CONFIG=${OKD_LAB_PATH}/lab-config/${CLUSTER_NAME}-${SUB_DOMAIN}-${LAB_DOMAIN}/kubeconfig
  export INSTALL_DIR=${OKD_LAB_PATH}/${CLUSTER_NAME}-${SUB_DOMAIN}-${LAB_DOMAIN}/okd-install-dir
  if [[ ${NEW_RELEASE} == "true" ]]
  then
    yq e ".cluster.release = \"${OKD_VERSION}\"" -i ${CLUSTER_CONFIG}
  else
    OKD_VERSION=$(yq e ".cluster.release" ${CLUSTER_CONFIG})
  fi
  if [[ ! -d ${OKD_LAB_PATH}/okd-cmds/${OKD_VERSION} ]]
  then
    getOkdCmds.sh
  fi
  for i in $(ls ${OKD_LAB_PATH}/okd-cmds/${OKD_VERSION})
  do
    rm -f ${OKD_LAB_PATH}/bin/${i}
    ln -s ${OKD_LAB_PATH}/okd-cmds/${OKD_VERSION}/${i} ${OKD_LAB_PATH}/bin/${i}
  done

  unset array_index
}

function getOkdRelease() {
  curl https://github.com/openshift/okd/releases/latest | cut -d"/" -f8 | cut -d\" -f1
}

function ocLogin() {
  if [[ -z ${CLUSTER_NAME} ]]
  then
    labctx
  fi
  oc login -u admin https://api.${CLUSTER_NAME}.${SUB_DOMAIN}.${LAB_DOMAIN}:6443
}

function ocConsole() {
  if [[ -z ${CLUSTER_NAME} ]]
  then
    labctx
  fi
  SYS_ARCH=$(uname)
  if [[ ${SYS_ARCH} == "Darwin" ]]
  then
    open -a Safari $(oc whoami --show-console)
  else
    echo "Unsupported OS: Cannot open console with this command"
    exit 1
  fi
}
